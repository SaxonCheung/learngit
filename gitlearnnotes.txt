msysgit是Windows版的Git，从http://msysgit.github.io/下载，然后按默认选项安装即可
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/

把修改提交到Git版本库
$ git add readme.txt
$ git commit -m "wrote a readme file"
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
 
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."

运行git status命令看看结果
比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看
本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
$ git log --pretty=oneline

在Git中，用HEAD表示当前版本，也就是最新的提交
$ git reset --hard HEAD^
HEAD is now at ea34578 add distributed

讀文件內容
$ cat readme.txt

可以指定回到未来的某个版本
$ git reset --hard 3628164
HEAD is now at 3628164 append GPL

Git提供了一个命令git reflog用来记录你的每一次命令
$ git reflog

提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
$ git diff HEAD -- readme.txt 

git checkout -- file可以丢弃工作区的修改
$ cat readme.txt

确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
$ git rm test.txt
rm 'test.txt'
$ git commit -m "remove test.txt"
[master d17efd8] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt
 
注册一个GitHub账号，就可以免费获得Git远程仓库
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码
如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
点“Add Key”，你就应该看到已经添加的Key
现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得
首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库
目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库
现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令
$ git remote add origin git@github.com:michaelliao/learngit.git
请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库
下一步，就可以把本地库的所有内容推送到远程库上
$ git push -u origin master
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样
从现在起，只要本地作了提交，就可以通过命令
$ git push origin master

命令git clone克隆一个本地库
$ git clone git@github.com:michaelliao/gitskills.git
$ cd gitskills
$ ls

創建dev分支
$ git branch dev
切換到分支dev
$ git checkout dev
相當於git checkout -b dev 
查看分支狀態
$ git branch 
* dev
  master
切回master分支
$ git checkout master
dev分支的工作成果合并到master分支上
$ git merge dev 
合并完成后，就可以放心地删除dev分支了
$ git branch -d dev 
用带参数的git log也可以看到分支的合并情况
$ git log --graph --pretty=oneline --abbrev-commit
用git log --graph命令可以看到分支合并图
--no-ff参数，表示禁用Fast forward
$ git merge --no-ff -m "merge with no-ff" dev
因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
合并后，我们用git log看看分支历史
$ git log --graph --pretty=oneline --abbrev-commit
把当前工作现场“储藏”起来，等以后恢复现场后继续工作
$ git stash
工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：
$ git stash list
工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了
开发代号为Vulcan的新功能
$ git checkout -b feature-vulcan
开发完毕
$ git add vulcan.py
$ git status
$ git commit -m "add feature vulcan"
接到上级命令，因经费不足，新功能必须取消
虽然白干了，但是这个分支还是必须就地销毁
$ git branch -d feature-vulcan
error: The branch 'feature-vulcan' is not fully merged.
If you are sure you want to delete it, run 'git branch -D feature-vulcan'.
销毁失败。Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan
现在我们强行删除
$ git branch -D feature-vulcan
Deleted branch feature-vulcan (was 756d4af).
终于删除成功

查看远程库的信息，用git remote
$ git remote
显示更详细的信息
$ git remote -v

推送分支
git push origin master 
git pudh origin dev 

打一個新標籤
$ git tag v1.0
查看所有標籤
$ git tag 
默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办
方法是找到历史提交的commit id，然后打上就可以了
$ git log --pretty=oneline --abbrev-commit
6a5819e merged bug fix 101
cc17032 fix bug 101
7825a50 merge with no-ff
6224937 add merge
59bc1cb conflict fixed
400b400 & simple
75a857c AND simple
fec145a branch test
d17efd8 remove test.txt
比方说要对add merge这次提交打标签，它对应的commit id是6224937，敲入命令
$ git tag v0.9 6224937
查看标签信息
$ git show v0.9
创建带有说明的标签，用-a指定标签名，-m指定说明文字
$ git tag -a v0.1 -m "version 0.1 released" 3628164
如果标签打错了，也可以删除
$ git tag -d v0.1
推送某个标签到远程
$ git push origin v1.0
推送所有標籤
$ git push origin --tags
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除
$ git tag -d v1.0
然后，从远程删除。删除命令也是push
$ git push origin :refs/tags /v1.0

点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone
git clone git@github.com:michaelliao/bootstrap.git
一定要从自己的账号下clone仓库，这样你才能推送修改

让Git显示颜色，会让命令输出看起来更醒目
$ git config --global color.ui true
在Git工作区的根目录下创建一个特殊的.gitignore文件
裡面建要忽略的文件

st表示status
$ git config --global alia.st status
配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用
每个仓库的Git配置文件都放在.git/config文件中
$ cat .git/config 
要删除别名，直接把对应的行删掉即可

搭建Git服务器
搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装
假设你已经有sudo权限的用户账号，下面，正式开始安装
第一步，安装git
$ sudo apt-get install git
第二步，创建一个git用户，用来运行git服务
$ sudo adduser git
第三步，创建证书登录
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个
第四步，初始化Git仓库
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git
$ sudo chown -R git:git sample.git
第五步，禁用shell登录
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行
git:x:1001:1001:,,,:/home/git:/bin/bash
改为
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出
第六步，克隆远程仓库
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository
剩下的推送就简单了