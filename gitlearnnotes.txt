msysgit是Windows版的Git，从http://msysgit.github.io/下载，然后按默认选项安装即可
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/

把修改提交到Git版本库
$ git add readme.txt
$ git commit -m "wrote a readme file"
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
 
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."

运行git status命令看看结果
比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的readme.txt，所以，需要用git diff这个命令看看
本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
$ git log --pretty=oneline

在Git中，用HEAD表示当前版本，也就是最新的提交
$ git reset --hard HEAD^
HEAD is now at ea34578 add distributed

讀文件內容
$ cat readme.txt

可以指定回到未来的某个版本
$ git reset --hard 3628164
HEAD is now at 3628164 append GPL

Git提供了一个命令git reflog用来记录你的每一次命令
$ git reflog

提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
$ git diff HEAD -- readme.txt 

git checkout -- file可以丢弃工作区的修改
$ cat readme.txt

确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
$ git rm test.txt
rm 'test.txt'
$ git commit -m "remove test.txt"
[master d17efd8] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt
 
注册一个GitHub账号，就可以免费获得Git远程仓库
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码
如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
点“Add Key”，你就应该看到已经添加的Key
现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得
首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库
目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库
现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令
$ git remote add origin git@github.com:michaelliao/learngit.git
请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库
下一步，就可以把本地库的所有内容推送到远程库上
$ git push -u origin master
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令
推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样
从现在起，只要本地作了提交，就可以通过命令
$ git push origin master

命令git clone克隆一个本地库
$ git clone git@github.com:michaelliao/gitskills.git
$ cd gitskills
$ ls

創建dev分支
$ git branch dev
切換到分支dev
$ git checkout dev
相當於git checkout -b dev 
查看分支狀態
$ git branch 
* dev
  master
切回master分支
$ git checkout master
dev分支的工作成果合并到master分支上
$ git merge dev 
合并完成后，就可以放心地删除dev分支了
$ git branch -d dev 
用带参数的git log也可以看到分支的合并情况
$ git log --graph --pretty=oneline --abbrev-commit